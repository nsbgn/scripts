#!/bin/sh
# The only thing I ever do with my music player is listen to albums, preferably
# from start to finish. I was frustrated with most music player interfaces as
# they were sluggish and hard to subject to my will. I wrote this simple script
# that uses standard UNIX tools to control mpv through IPC.
#
# sudo apt-get install mpv fzf xdg-dirs socat find shuf sort

# TODO: Show play/pause as first option if something is already in mpv's
# playlist

MUSIC="$(xdg-user-dir MUSIC)"
CACHE="$HOME/.cache/mpvcache"
SOCK="/tmp/mpvsocket"
PLAYLIST="/tmp/mpvplaylist"

# Test if an instance of mpv is already listening; if not, start one
if ! test -S "$SOCK"; then
    mpv --idle --no-terminal --no-audio-display --input-ipc-server="$SOCK" &
fi

# Update the music database if it has changed
if [ ! -f "$CACHE" -o "$MUSIC" -nt "$CACHE" ]; then
    find -L "$MUSIC" -type d -links 2 -printf '%P\n' > "$CACHE"
fi

# Query for album to play, and make corresponding playlist
shuf "$CACHE" \
| fzf --preview "ls \"$MUSIC\"/{} | sed -n 's/\(.*\)\.[[:alnum:]]\+$/\1/p'" \
| xargs -I{} find "$MUSIC/{}" -regex '.*\.\(mp3\|webm\|m4a\|flac\|ogg\|wav\)' \
| sort > "$PLAYLIST"

# Play it
if [ -s "$PLAYLIST" ]; then
socat - "$SOCK" 2>&1 > /dev/null << EOF
{"command":["loadlist","$PLAYLIST","replace"]}
{"command":["set","pause","no"]}
EOF
fi
