#!/usr/bin/env python3
"""
A polybar/lemonbar module to show a taskbar. Work-in-progress.
"""
# The following script from Stephan Sokolow was a huge help:
# https://gist.github.com/ssokolow/e7c9aae63fb7973e4d64cff969a78ae8
# Also see the documentation at:
# https://specifications.freedesktop.org/wm-spec/1.3/ar01s03.html


from __future__ import annotations
from Xlib.display import Display
from Xlib import X
from typing import Iterator, Optional
from Xlib.protocol.rq import Event

# Connect to X
display = Display()
root = display.screen().root
_NET_ACTIVE_WINDOW = display.intern_atom('_NET_ACTIVE_WINDOW')
_NET_CURRENT_DESKTOP = display.intern_atom("_NET_CURRENT_DESKTOP")
_NET_CLIENT_LIST = display.get_atom('_NET_CLIENT_LIST')
_NET_WM_DESKTOP = display.get_atom('_NET_WM_DESKTOP')
_NET_NUMBER_OF_DESKTOPS = display.get_atom('_NET_NUMBER_OF_DESKTOPS')


def icon(s: str) -> str:
    return {
        "Firefox-esr": "  ",
        "Zathura": "  ",
        "URxvt": "  ",
        "TelegramDesktop": "  "
    }.get(s, s)


def on_focus_change() -> Iterator[Optional[Event]]:
    """
    Emit an event when window focus changes.
    """
    yield None
    root.change_attributes(event_mask=X.PropertyChangeMask)
    while True:
        event = display.next_event()
        if event.type == X.PropertyNotify and event.atom == _NET_ACTIVE_WINDOW:
            yield event


def sep(left: bool | None, right: bool | None) -> str:
    """
    Produce powerline separating symbols and accompanying lemonbar/polybar
    color codes.
    """
    fg1: str = "#ffffff"
    bg1: str = "#302925"
    fg0: str = "#302925"
    bg0: str = "#e9e2d2"

    if left is None and right is True:
        return f"%{{B-}}%{{F{bg1}}}%{{B{bg1}}}%{{F{fg1}}} "
    elif left is None and right is False:
        return f"%{{B-}}%{{F{bg0}}}%{{B{bg0}}}%{{F{fg0}}} "
    elif left is False and right is True:
        return f" %{{B{bg1}}}%{{F{bg0}}}%{{F{fg1}}} "
    elif left is True and right is False:
        return f" %{{B{bg0}}}%{{F{bg1}}}%{{F{fg0}}} "
        # return f" %{{F{bg1}}}%{{B{bg1}}}%{{F{fg1}}} "
    elif left is not None and right is None:
        return f" %{{B-}}%{{F{bg1 if left else bg0}}}%{{F-}}"
    else:
        assert left is False and right is False
        return f" %{{F{fg1}}}%{{F{fg0}}} "
        # return f" %{{F{fg1}}}%{{F{fg0}}} "


class Window(object):

    def __init__(self, window_id: int):
        self.wid = window_id
        self.obj = display.create_resource_object('window', window_id)
        self.inst, self.cls = self.obj.get_wm_class()
        self.ws: int = self.obj.get_full_property(
            _NET_WM_DESKTOP, property_type=X.AnyPropertyType).value[0]

    @staticmethod
    def clients() -> list[list['Window']]:
        n = root.get_full_property(
            _NET_NUMBER_OF_DESKTOPS, X.AnyPropertyType).value[0]
        workspaces: list[list['Window']] = [[] for _ in range(n)]
        for client_id in root.get_full_property(
                _NET_CLIENT_LIST, property_type=X.AnyPropertyType).value:
            w = Window(client_id)
            workspaces[w.ws].append(w)
        return workspaces


if __name__ == '__main__':

    for _ in on_focus_change():
        active_ws = root.get_full_property(
            _NET_CURRENT_DESKTOP, X.AnyPropertyType).value[0]
        active_wid = root.get_full_property(
            _NET_ACTIVE_WINDOW, X.AnyPropertyType).value[0]

        r = []
        for i, ws in enumerate(Window.clients()):
            if i != 0:
                r.append("   ")
            previous = None
            if ws:
                for w in ws:
                    active = w.wid == active_wid
                    string = w.cls
                    if previous is None:
                        r.append(f"%{{A:xdotool windowactivate {w.wid}:}}")
                        r.append(sep(previous, active))
                    else:
                        r.append(sep(previous, active))
                        r.append(f"%{{A}}%{{A:xdotool windowactivate {w.wid}:}}")
                    r.append(icon(string))
                    previous = active
                r.append(sep(previous, None))
                r.append("%{A}")
            else:
                active = i == active_ws
                r.append(f"%{{A:xdotool set_desktop {i}:}}")
                r.append(sep(None, active))
                r.append(sep(active, None))
                r.append("%{A}")

        print("".join(r))
        print(flush=True)
